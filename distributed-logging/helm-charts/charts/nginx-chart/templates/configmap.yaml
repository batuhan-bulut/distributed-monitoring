apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-config
  namespace: {{ .Values.global.namespace }}
data:
  nginx.conf: |
    load_module modules/ngx_otel_module.so;
    events {}
    http {

    log_format trace_log_json escape=json '{'
        '"remote_addr": "$remote_addr", '
        '"remote_user": "$remote_user", '
        '"time_local": "$time_local", '
        '"request": "$request", '
        '"status": "$status", '
        '"body_bytes_sent": "$body_bytes_sent", '
        '"http_referer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"otelTraceID": "$otel_trace_id", '
        '"otelSpanID": "$otel_span_id"'
    '}';

      access_log /var/log/nginx/access.log trace_log_json;
      error_log /var/log/nginx/error.log warn;


      otel_service_name nginx-rp;
      upstream frontend {
        server dist-frontend-svc:8000;  # DNS name of the service from Docker Compose
      }

      otel_exporter {
            endpoint dist-otel-collector-svc:4317;
        }

      server {
        listen 8080;

        location / {
          otel_trace on;
          otel_trace_context inject;
          proxy_pass http://frontend;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location /grafana/ {
          proxy_pass http://dist-grafana-svc:3000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-otel-collector-log-read-config
  namespace: {{ .Values.global.namespace }}
data:
  otel-collector-log-read-config.yaml: |
    receivers:
      filelog:
        include:
          - /var/log/nginx/*.log
        start_at: end
        resource:
          service.name: "nginx-rp"
        operators:
        - type: json_parser
          parse_from: body
    exporters:
      otlphttp:
        endpoint: http://dist-loki-svc:3100/otlp
        tls:
          insecure: true
    processors:
      batch: {}
      resource:
        attributes:
          - action: insert
            key: service.name
            value: nginx-rp  
    service:
      pipelines:
        logs/nginx:
          receivers: [filelog]
          exporters: [otlphttp]
          processors: [batch]